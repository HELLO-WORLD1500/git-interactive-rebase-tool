version: "{build}"
clone_depth: 1
clone_folder: c:\projects\git-interactive-rebase-tool

# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

environment:
  global:
    RUST_VERSION: stable
    CRATE_NAME: git-interactive-rebase-tool

  matrix:
    # MinGW
    - TARGET: i686-pc-windows-gnu
    - TARGET: x86_64-pc-windows-gnu

    # MSVC
    - TARGET: i686-pc-windows-msvc
    - TARGET: x86_64-pc-windows-msvc

install:
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V
  #    - curl -o PDCurses-3.5.tar.gz https://ayera.dl.sourceforge.net/project/pdcurses/pdcurses/3.5/PDCurses-3.5.tar.gz
  #    - tar vxf PDCurses-3.5.tar.gz
  #    - make -C PDCurses-3.5/win32/ -f gccwin32.mak WIDE=Y
  #    - mv PDCurses-3.5/win32/pdcurses.a PDCurses-3.5/win32/libpdcurses.a


test_script:
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo build --target %TARGET% &&
      cargo build --target %TARGET% --release &&
      cargo test --target %TARGET% &&
      cargo test --target %TARGET% --release &&
      cargo run --target %TARGET% -- --version &&
      cargo run --target %TARGET% --release -- --version
    )

before_deploy:
  - cargo rustc --target %TARGET% --release --bin interactive-rebase-tool -- -C lto
  - ps: ci\before-deploy.ps1

#deploy:
#  artifact: /.*\.zip/
#  # TODO update `auth_token.secure`
#  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
#  # - Encrypt it. Go to https://ci.appveyor.com/tools/encrypt
#  # - Paste the output down here
#  auth_token:
#    secure: t3puM/2hOig26EHhAodcZBc61NywF7/PFEpimR6SwGaCiqS07KR5i7iAhSABmBp7
#  description: ''
#  on:
#    # TODO Here you can pick which targets will generate binary releases
#    # In this example, there are some targets that are tested using the stable
#    # and nightly channels. This condition makes sure there is only one release
#    # for such targets and that's generated using the stable channel
#    RUST_VERSION: stable
#    appveyor_repo_tag: true
#  provider: GitHub

artifacts:
    - path: '*.zip'

cache:
  - C:\Users\appveyor\.cargo\registry
  - target


branches:
  only:
    - windows-build

#notifications:
#  - provider: Email
#    on_build_success: false

# Building is done in the test phase, so we disable Appveyor's build phase.
build: false
